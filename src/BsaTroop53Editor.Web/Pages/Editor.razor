@page "/editor"
@inject ILogger<Post> Logger

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<PageTitle>@title</PageTitle>

<div class="row">
    <div class="col-md-12">
        <h1 class="page-head-line">@title</h1>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <EditForm Model="Model" FormName="NewPostForm" OnValidSubmit="@ValidSubmit" OnInvalidSubmit="@InvalidSubmit">
            <DataAnnotationsValidator />
            <div class="panel panel-default">
                <div class="panel-heading">
                    Post Information
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <p>
                            <label for="postTitleField">
                                Title
                            </label>
                        </p>
                        <p>
                            <InputText 
                                id="postTitleField"
                                class="form-control"
                                @bind-Value="Model!.Title"
                                placeholder="A catchy headline."
                            />
                        </p>
                    </div>
                    <div class="form-group">
                        <p>
                            <label for="postDateField">
                                Post Date - When the event took place
                            </label>
                        </p>
                        <p>
                            <InputDate 
                                id="postDateField"
                                class="form-control"
                                Type="InputDateType.Date"
                                min="@(new DateTime( 1924, 1, 1 ).ToString( "yyyy-MM-dd" ))"
                                max="@DateTime.Today.ToString("yyyy-MM-dd")"
                                @bind-Value="Model!.PostDate"
                            />
                        </p>
                        <p class="checkbox">
                            <label for="dateIsEstimatteCheckbox">
                            <InputCheckbox id="dateIsEstimatteCheckbox" @bind-Value="Model!.IsPostDateAnEstimate" />
                            This date is an estimate.
                            </label>
                        </p>
                    </div>
                    <div class="form-group">
                        <p>
                            <label for="descriptionField">
                                Description
                            </label>
                        </p>
                        <p>
                            <InputText 
                                id="descriptionField" 
                                class="form-control"
                                @bind-Value="@Model!.Description"
                                placeholder="One-sentence overview of this post."
                            />
                        </p>
                    </div>
                    <div class="form-group">
                        <p>
                            <label for="authorField">
                                Author
                            </label>
                        </p>
                        <p>
                            <InputText 
                                id="authorField" 
                                class="form-control"
                                @bind-Value="@Model!.Author"
                                placeholder="Leave blank to remain anonymous."
                            />
                        </p>
                    </div>
                    <div>
                        <label for="postCategoryInput">
                            Category - Where does your post fit in best?
                            <InputSelect class="form-control" @bind-Value="Model!.Category">
                                <option value="@PostCategory.Outings">@PostCategory.Outings.ToHumanReadableString()</option>
                                <option value="@PostCategory.Recipes">@PostCategory.Recipes.ToHumanReadableString()</option>
                                <option value="@PostCategory.ScoutSkills">@PostCategory.ScoutSkills.ToHumanReadableString()</option>
                                <option value="@PostCategory.CampingTrips">@PostCategory.CampingTrips.ToHumanReadableString()</option>
                                <option value="@PostCategory.EagleProjects">@PostCategory.EagleProjects.ToHumanReadableString()</option>
                                <option value="@PostCategory.PressReleases">@PostCategory.PressReleases.ToHumanReadableString()</option>
                            </InputSelect>
                        </label>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    Post Contents
                </div>
                <div class="panel-body">
                <div class="form-group">
                    <MarkdownEditor @bind-Value="Model!.PostContents" />
                    </div>
                </div>
            </div>
            <PhotoCollection @bind-Value="Model!.Photos" />
            <div class="panel panel-default">
                <div class="panel-heading">
                    Tags
                </div>
                <div class="panel-body">
                    <TagCollection @bind-Value="Model!.Tags" />
                </div>
                <div class="panel-footer">
                    <p>
                        <small>
                            Tags are used to assist when searching for posts.  
                            They usually include information such as names of people at an event, 
                            name of the location of an event, etc.
                        </small>
                    </p>
                    <p>
                        <small>
                            For a list of pre-exsiting tags to chose from, see <a href="https://bsatroop53.com/tag/" target="_blank" rel="noopener noreferrer nofollow">this page</a> on the troop website.
                        </small>
                    </p>
                    <p>
                        <small>
                            A more technical description of tags can be found on <a href="https://en.wikipedia.org/wiki/Tag_(metadata)" target="_blank" rel="noopener noreferrer nofollow">Wikipedia</a>
                        </small>
                    </p>
                </div>
            </div>
            @if( Model?.Category == PostCategory.EagleProjects )
            {
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Location Information (Eagle Projects Only)
                    </div>
                    <div class="panel-body">
                        <div class="form-group">
                            <p>
                                <label for="latitudeField">
                                    Latitude
                                </label>
                            </p>
                            <p>
                                <InputNumber id="latitudeField"
                                             class="form-control"
                                             @bind-Value="@Model!.Latitude"
                                             placeholder="Leave blank to not specify a location" />
                            </p>
                            <p>
                                <label for="longitudeField">
                                    Longitude
                                </label>
                            </p>
                            <p>
                                <InputNumber id="longitudeField"
                                             class="form-control"
                                             @bind-Value="@Model!.Longitude"
                                             placeholder="Leave blank to not specify a location" />
                            </p>
                        </div>
                    </div>
                    <div class="panel-footer">
                        <small>You can get GPS Coordinates from <a href="https://www.gps-coordinates.net/" target="_blank" rel="noopener noreferrer nofollow">this website</a>, and inputting the "decimal degress" values in this form.</small>
                    </div>
                </div>
            }
            <div class="form-group">
                <p class="checkbox">
                    <label for="readGuideCheckBox">
                        <InputCheckbox id="readGuideCheckBox" @bind-Value="Model!.Agreed"/>
                        I have read the contribution guidelines, and agree to follow them.
                    </label>
                </p>
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
            <ValidationSummary />
        </EditForm>
    </div>
</div>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;

        if (fileName) {
            anchorElement.download = fileName;
        }

        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

@code {

    // ---------------- Fields ----------------

    private const string title = "Editor";

    private EditContext? editContext;

    [SupplyParameterFromForm]
    private Post? Model { get; set; }

    protected override void OnInitialized()
    {
        Model = new Post();
        editContext = new( Model );
    }

    // ---------------- Properties ----------------

    // ---------------- Functions ----------------

    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    private async Task ValidSubmit()
    {
        if( this.Model is null )
        {
            return;
        }

        FileToDownload file = await this.Model.CreateZipFile();
        using( Stream fileStream = file.FileStream )
        {
            fileStream.Position = 0;
            using( var streamRef = new DotNetStreamReference( fileStream ) )
            {
                await JSRuntime.InvokeVoidAsync( "downloadFileFromStream", file.FileName, streamRef );
            }
        }
    }

    private void InvalidSubmit()
    {
        Logger.LogInformation( "Not Valid!" );
        Logger.LogInformation( Model?.Tags?.FirstOrDefault() ?? "Empty" );
    }
}

