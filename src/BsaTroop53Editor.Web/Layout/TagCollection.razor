<div class="form-group">
    <p>
        <ul class="@ListClass">
            @foreach( string tag in this.Value ?? Array.Empty<string>() )
            {
                <li>
                    @tag <button @onclick="() => this.RemoveTag(tag)">X</button>
                </li>
            }
        </ul>
    </p>
    <p>
        <InputText id="addTagField"
            class="form-control"
            @bind-Value="@newTag"
            @onkeypress="OnKeyPress"
        />
    </p>
    <p>
        <button class="btn btn-success" @onclick="AddTagEvent">Add Tag</button>
    </p>
</div>

@code {

    // ---------------- Fields ----------------

    private string newTag = "";

    private static readonly Regex tagTimmer = new Regex(
        @"[^\w ]",
        RegexOptions.Compiled | RegexOptions.ExplicitCapture
    );

    private static readonly Regex tagSpaceTrimmer = new Regex(
        @"\s{2,}",
        RegexOptions.Compiled | RegexOptions.ExplicitCapture
    );

    // ---------------- Properties ----------------

    [Parameter]
    public ICollection<string>? Value { get; set; }

    [Parameter]
    public EventCallback<ICollection<string>> ValueChanged { get; set; }

    private string ListClass
    {
        get
        {
            if( ( this.Value is null ) || ( this.Value.Any() == false ) )
            {
                return "hidden";
            }
            else
            {
                return "tags";
            }
        }
    }

    // ---------------- Functions ----------------

    private async Task AddTagEvent()
    {
        if( string.IsNullOrWhiteSpace( this.newTag ) )
        {
            return;
        }

        if( this.Value is null )
        {
            this.Value = new HashSet<string>();
        }

        this.newTag = this.newTag.ToLower().Trim();
        this.newTag = tagSpaceTrimmer.Replace( newTag, " " );
        this.newTag = tagTimmer.Replace( newTag, "" );

        this.Value.Add( this.newTag );
        this.newTag = "";

        await ValueChanged.InvokeAsync( this.Value );
    }

    private async Task RemoveTag( string tag )
    {
        if( this.Value is null )
        {
            return;
        }

        if( this.Value.Contains( tag ) == false )
        {
            return;
        }

        this.Value.Remove( tag );
        await ValueChanged.InvokeAsync( this.Value );
    }

    private async Task OnKeyPress( KeyboardEventArgs e )
    {
        if( ( e.Key == "," ) || ( e.Key == "\n" ) )
        {
            await AddTagEvent();
        }
    }
}
